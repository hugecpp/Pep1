函数指针和指针函数。
typedef int (*p)(int,int)。
常量指针和指针常量。

四种预编译命令（头文件包含，条件编译，宏替换和布局控制）。
void * (过度指针)可以指向任意类型指针（像是模板一样），void * 类型函数是有返回值的。

extern（外部） volatile（异变，告诉编译器不做优化） static void 函数名（只是在声明他的文件当中可见，不能被其他文件所用）。
extern:一处头文件定义/声明，在多处包含该头文件的地方使用extern字进行使用。(如果是.h中定义需要包含头文件，.cpp中定义可以直接通过extern关键字 + 类型 + 变量名 获取；针对extern的变量名，全局只能存在一个)

void *memcpy(void *destin,viod*source,unsigned n) //返回一个指向destin的指针。
作用是：以source指向的地址为起点，将连续的n个字节数据，复制到以destin指向的地址为起点的内存中。
函数有三个参数，第一个是目标地址，第二个是源地址，第三个是数据长度。

State 和 Status 的核心区别，就是它们的枚举值之间是否有依赖关系，没有依赖关系的用 State，有依赖关系的用 Status。

对于头文件重复包含可以使用  #ifndef M_s  #define M_s处理。
头文件与源文件如果存在同类型同名称的变量，编译时会分配不同的地址。(编译不通过，重定义)

全局static修饰只能在本文件访问，extern修饰也不可访问(函数同理)

git use